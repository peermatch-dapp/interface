/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Proxy, ProxyInterface } from "../Proxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    name: "changeAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_implementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_implementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000c8838038062000c8883398181016040528101906200003791906200015d565b62000048816200004f60201b60201c565b50620001cd565b600062000061620000c560201b60201c565b9050817fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103557f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f8183604051620000b9929190620001a0565b60405180910390a15050565b6000807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490508091505090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200012582620000f8565b9050919050565b620001378162000118565b81146200014357600080fd5b50565b60008151905062000157816200012c565b92915050565b600060208284031215620001765762000175620000f3565b5b6000620001868482850162000146565b91505092915050565b6200019a8162000118565b82525050565b6000604082019050620001b760008301856200018f565b620001c660208301846200018f565b9392505050565b610aab80620001dd6000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100675780634f1ef286146100905780635c60da1b146100c05780638f283970146100eb578063f851a440146101145761005d565b3661005d5761005b61013f565b005b61006561013f565b005b34801561007357600080fd5b5061008e600480360381019061008991906106f1565b6101dc565b005b6100aa60048036038101906100a59190610783565b610268565b6040516100b79190610873565b60405180910390f35b3480156100cc57600080fd5b506100d56103ae565b6040516100e291906108a4565b60405180910390f35b3480156100f757600080fd5b50610112600480360381019061010d91906106f1565b61043d565b005b34801561012057600080fd5b506101296104c9565b60405161013691906108a4565b60405180910390f35b6000610149610558565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b190610942565b60405180910390fd5b3660008037600080366000845af43d6000803e806101d7573d6000fd5b3d6000f35b6101e4610586565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806102495750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1561025c57610257816105b4565b610265565b61026461013f565b5b50565b6060610272610586565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806102d75750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1561039e576102e5846105b4565b6000808573ffffffffffffffffffffffffffffffffffffffff16858560405161030f9291906109a1565b600060405180830381855af49150503d806000811461034a576040519150601f19603f3d011682016040523d82523d6000602084013e61034f565b606091505b509150915081610394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038b90610a2c565b60405180910390fd5b80925050506103a7565b6103a661013f565b5b9392505050565b60006103b8610586565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061041d5750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b156104315761042a610558565b905061043a565b61043961013f565b5b90565b610445610586565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806104aa5750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b156104bd576104b88161061d565b6104c6565b6104c561013f565b5b50565b60006104d3610586565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806105385750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1561054c57610545610586565b9050610555565b61055461013f565b5b90565b6000807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490508091505090565b6000807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490508091505090565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc558073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6000610627610586565b9050817fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103557f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f818360405161067d929190610a4c565b60405180910390a15050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106be82610693565b9050919050565b6106ce816106b3565b81146106d957600080fd5b50565b6000813590506106eb816106c5565b92915050565b60006020828403121561070757610706610689565b5b6000610715848285016106dc565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126107435761074261071e565b5b8235905067ffffffffffffffff8111156107605761075f610723565b5b60208301915083600182028301111561077c5761077b610728565b5b9250929050565b60008060006040848603121561079c5761079b610689565b5b60006107aa868287016106dc565b935050602084013567ffffffffffffffff8111156107cb576107ca61068e565b5b6107d78682870161072d565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b60005b8381101561081d578082015181840152602081019050610802565b60008484015250505050565b6000601f19601f8301169050919050565b6000610845826107e3565b61084f81856107ee565b935061085f8185602086016107ff565b61086881610829565b840191505092915050565b6000602082019050818103600083015261088d818461083a565b905092915050565b61089e816106b3565b82525050565b60006020820190506108b96000830184610895565b92915050565b600082825260208201905092915050565b7f50726f78793a20696d706c656d656e746174696f6e206e6f7420696e6974696160008201527f6c697a6564000000000000000000000000000000000000000000000000000000602082015250565b600061092c6025836108bf565b9150610937826108d0565b604082019050919050565b6000602082019050818103600083015261095b8161091f565b9050919050565b600081905092915050565b82818337600083830152505050565b60006109888385610962565b935061099583858461096d565b82840190509392505050565b60006109ae82848661097c565b91508190509392505050565b7f50726f78793a2064656c656761746563616c6c20746f206e657720696d706c6560008201527f6d656e746174696f6e20636f6e7472616374206661696c656400000000000000602082015250565b6000610a166039836108bf565b9150610a21826109ba565b604082019050919050565b60006020820190508181036000830152610a4581610a09565b9050919050565b6000604082019050610a616000830185610895565b610a6e6020830184610895565b939250505056fea2646970667358221220310423e5b1e7aa20e602e1b2672be6d9be4e47dcc5fd6a79c6240bee2f7bf01964736f6c63430008110033";

type ProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Proxy__factory extends ContractFactory {
  constructor(...args: ProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Proxy> {
    return super.deploy(_admin, overrides || {}) as Promise<Proxy>;
  }
  override getDeployTransaction(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_admin, overrides || {});
  }
  override attach(address: string): Proxy {
    return super.attach(address) as Proxy;
  }
  override connect(signer: Signer): Proxy__factory {
    return super.connect(signer) as Proxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxyInterface {
    return new utils.Interface(_abi) as ProxyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Proxy {
    return new Contract(address, _abi, signerOrProvider) as Proxy;
  }
}
